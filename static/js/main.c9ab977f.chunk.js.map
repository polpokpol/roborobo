{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAiBeA,EAdF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE3B,OAEA,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACC,4BAAKF,GACL,2BAAIC,MCMQK,EAdE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAEbC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,WAGhF,OACE,6BACIO,ICMQK,EAfG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OAEC,yBAAKX,UAAU,OACd,2BACCA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCqBCI,EA7BA,SAACC,GACf,OAEC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,WCoDKC,G,wDAhDb,aAAc,IAAD,8BACX,gBAeFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAf1C,EAAKC,MAAQ,CACXzB,OAAQ,GACRsB,YAAa,IAJJ,E,gEAQO,IAAD,OAGjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACrB,OAAQ8B,S,+BAQjC,IAAD,EAE0BC,KAAKN,MAA7BzB,EAFF,EAEEA,OAAQsB,EAFV,EAEUA,YACVU,EAAiBhC,EAAOiC,QAAO,SAACC,GACpC,OAAQA,EAAMzC,KAAK0C,cAAcC,SAASd,EAAYa,kBAGxD,OAAQnC,EAAOqC,OAMb,yBAAKzC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAUgC,MATvB,6BACC,wBAAIpC,UAAU,MAAd,oB,GA/BU0C,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCLNC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c9ab977f.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({name, email, id} ) => {\n\t// const {name, email, id} = props;\n\treturn(\n\n\t<div className='tc bg-light-green dib br3 ma2 pa3 grow shadow-5 bw2'>\n\t\t<img alt=\"photo\" src={`https://robohash.org/${id}?200x200`} />\n\t\t<div>\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{email}</p>\n\t\t</div>\n\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\n\nconst CardList = ({ robots }) =>{\n\n\tconst cardArray = robots.map((user, i) => {\n\t\treturn (<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>);\n\t});\n\n\treturn(\n\t\t <div>\n\t    \t{cardArray}\n\t    </div>\n\t);\n}\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nconst Scroll = (props) => {\n\treturn(\n\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\n// class Scroll extends Component{\n\n// \tconstructor(props){\n// \t\tthis.props = props;\n// \t}\n\n// \trender(){\n// \t\treturn(\n\n// \t\t\t<div style={{ overflow: 'scroll', border: '5px solid black', height: '500px'}}>\n// \t\t\t\t{this.props.children}\n// \t\t\t</div>\n// \t\t);\n// \t}\n// }\n\n\n\n\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/SearchBox.js';\n// import {robots} from './robots';\nimport Scroll from '../components/Scroll.js';\nimport './App.css';\n\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount(){\n    // this.setState({robots: robots});\n    // console.log(\"check checsk\");\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({robots: users}));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value});\n    // console.log(event.target.value);\n  }\n\n  render(){\n\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter((robot) =>{\n      return( robot.name.toLowerCase().includes(searchfield.toLowerCase()));\n    });\n\n    return !robots.length ?    \n      (<div>\n        <h1 className='tc'>Loading!!!!</h1>\n      </div>) :\n      \n     (\n      <div className='tc'>\n        <h1 className='f1'>Robofriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <CardList robots = {filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import Hello from './Hello.js'\n// import Card from './Card.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import {robots} from './robots';\n// import CardList from './CardList.js';\n\n// let AA = <h1>asassad</h1>;\n\nReactDOM.render(\n\t<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}